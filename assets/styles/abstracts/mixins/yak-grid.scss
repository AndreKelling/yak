@charset "UTF-8";

@mixin yak-clearfix() {
    &::after {
        clear: both;
        content: "";
        display: block;
    }
}

@mixin yak-gutter($gutters: $grid-gutter-widths) {
    @if length($gutters) > 1 {
        @each $breakpoint in map-keys($gutters) {
            @include media-breakpoint-up($breakpoint) {
                $gutter: map-get($gutters, $breakpoint);
                padding-right: ($gutter / 2);
                padding-left: ($gutter / 2);
            }
        }
    }
}

@mixin yak-outer-container($container-max-width: $container-max-width) {
    @include yak-clearfix();
    position: relative;
    max-width: $container-max-width + $grid-gutter-width-base;
    margin-left: auto;
    margin-right: auto;
    padding-left: $grid-gutter-width-half;
    padding-right: $grid-gutter-width-half;
}

// @mixin make-row($gutters: $grid-gutter-widths) {
@mixin yak-container($gutters: $grid-gutter-widths) {
    display: flex;
    flex-wrap: wrap;

    @each $breakpoint in map-keys($gutters) {
        @include media-breakpoint-up($breakpoint) {
            $gutter: map-get($gutters, $breakpoint);
            margin-right: ($gutter / -2);
            margin-left: ($gutter / -2);
        }
    }
}

@mixin yak-column($columns, $gutters: $grid-gutter-widths) {

    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }

    // @mixin make-col-ready($gutters: $grid-gutter-widths) {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    //--width: 100%;
    width: percentage($size);
    min-height: 1px; // Prevent collapsing

    @include yak-gutter();


    //@mixin make-col($size, $columns: $grid-columns) {

    // Safari Bug
    //--flex: 0 0 percentage($size);
    flex: 0 0 auto;
    // width: percentage($size / $columns);
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size);
}

//@mixin make-col-offset($size, $columns: $grid-columns) {
@mixin yak-push($columns) {
    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }
    //@mixin make-col-push($size, $columns: $grid-columns) {
    margin-left: percentage($size);
}

//@mixin make-col-push($size, $columns: $grid-columns) {
//@mixin make-col-pull($size, $columns: $grid-columns) {
@mixin yak-shift($columns) {
    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }
    position: relative;
    left: percentage($size);
}


@mixin yak-visual($color: null, $grid: $neat-grid) {
    @if $env == 'development' and $grid-visual == true {
        &:after {
            content: '';
            display: block;
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            z-index: -1;
            @include grid-visual($color, $grid);
            margin-left: -($grid-gutter-width-base / 2);
            margin-right: -($grid-gutter-width-base / 2);
        }
    }
}


@mixin yak-equal-width() {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
}

@mixin yak-width($columns, $prefix: '', $gutters: $grid-gutter-widths) {

    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }

    @if $prefix == 'min' or $prefix == 'max' {
        $prefix: "#{$prefix}-";
    } @else {
        $prefix: '';
    }
    #{$prefix}width: percentage($size);
}
